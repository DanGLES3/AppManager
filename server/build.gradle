// SPDX-License-Identifier: GPL-3.0-or-later

apply from: "$gradle.ext.appManagerRoot/common.gradle"

android.libraryVariants.all { variant ->
    variant.assembleProvider.get().doLast {
        makeJars(variant.buildType.name)
    }
}

dependencies {
    compileOnly project(path: ':hiddenapi')
    api project(path: ':libserver')
}

android.libraryVariants.all { variant ->
    variant.assembleProvider.configure() {
        it.doLast {
            makeJars(variant.buildType.name)
        }
    }
}

def makeJars(String buildType) {
    println("Build type ${buildType}")

    if (!isModified()) {
        println("Files aren't modified, skip creating jar files.")
        return
    }

    String debugClassDir = project.rootDir.absolutePath + '/server/build/intermediates/javac/' + buildType + '/classes'
    String libserverClassDir = project.rootDir.absolutePath + '/libserver/build/intermediates/javac/' + buildType + '/classes'
    def hiddenApiClassDir = project.rootDir.absolutePath + '/hiddenapi/build/classes/java/main'
    def amJar = project.rootDir.absolutePath + '/app/src/main/assets/am.jar'
    def mainJar = project.rootDir.absolutePath + '/app/src/main/assets/main.jar'

    println("Build success, creating am.jar...")
    def buildArgs = ['--release', '--output', amJar]
    buildArgs.addAll(getClassFiles(libserverClassDir, ["io/github/muntashirakon/AppManager/server/common/"]))
    buildArgs.addAll(getClassFiles(debugClassDir, ["io/github/muntashirakon/AppManager/server/"]))
    buildArgs.add(hiddenApiClassDir + "/android/app/ActivityThread.class")
    buildArgs.addAll(['--lib', "${android.sdkDirectory.path}/platforms/android-${rootProject.ext.targetSdk}/android.jar"])
    println(buildArgs.toString())
    exec {
        workingDir = project.rootDir
        executable = file("${android.sdkDirectory.path}/build-tools/${android.buildToolsVersion}/d8")
        args = buildArgs
    }
    println("Created ${amJar}")
    println("Creating main.jar...")
    buildArgs = ['--release', '--output', mainJar]
    buildArgs.add("${debugClassDir}/io/github/muntashirakon/AppManager/server/RootServiceMain.class")
    buildArgs.add("${libserverClassDir}/io/github/muntashirakon/AppManager/server/common/ServerUtils.class")
    buildArgs.addAll(['--lib', "${android.sdkDirectory.path}/platforms/android-${rootProject.ext.targetSdk}/android.jar"])
    exec {
        workingDir = project.rootDir
        executable = file("${android.sdkDirectory.path}/build-tools/${android.buildToolsVersion}/d8")
        args = buildArgs
    }
    println("Created ${mainJar}")
}

def isModified() {
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir = project.rootDir
        executable = "${project.rootDir}/scripts/check_am_server.sh"
        standardOutput = stdout
    }
    return stdout.toString().trim() == "M"
}

def getClassFiles(String path, List<String> pkgPath) {
    def ret = []
    pkgPath.forEach {
        it ->
            def file = new File(path, it)
            loadClsFiles(file, ret)
    }
    return ret
}

def loadClsFiles(File f, List paths) {
    File[] files = f.listFiles()
    if (files != null) {
        files.each {
            file ->
                if (file.file) {
                    if (file.name.endsWith(".class") && !file.name.startsWith("IPCMain")) {
                        paths.add(file.path)
                    }
                } else {
                    loadClsFiles(file, paths)
                }
        }
    }
}

task cleanupJar() {
    doLast {
        file("${rootProject.projectDir.absolutePath}/app/src/main/assets/am.jar").delete()
        file("${rootProject.projectDir.absolutePath}/app/src/main/assets/main.jar").delete()
    }
}

clean.dependsOn cleanupJar
